{"version":3,"sources":["actions/index.js","pages/ConnectPage.jsx","pages/BleNotSupported.jsx","components/TestButton.jsx","components/ScenarioButton.jsx","pages/Home.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","reducer/index.js","store/index.js","index.js"],"names":["activatePneumatic","val","dispatch","getState","a","characteristic","console","log","encoder","TextEncoder","writeValue","encode","type","payload","ConnectButton","label","handleEvent","useDispatch","Box","Fab","sx","borderRadius","onClick","serviceUuid","characteristicUuid","navigator","bluetooth","requestDevice","filters","name","optionalServices","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","myDescriptor","readValue","value","decoder","TextDecoder","decode","variant","BleNotSupported","href","target","rel","TestButton","color","textColor","title","boxShadow","m","pt","Paper","raised","display","minWidth","minHeight","background","CardActionArea","Typography","fontSize","gutterBottom","component","mb","Card","elevation","Home","style","width","height","overflow","msOverflowStyle","ScenarioButton","App","useState","supportsBluetooth","setSupportsBluetooth","isConnected","useSelector","state","useEffect","ConnectPage","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","connectDevice","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gRAqCaA,EAAoB,SAACC,GAChC,8CAAO,WAAOC,EAAUC,GAAjB,mBAAAC,EAAA,+DACsBD,IAAnBE,EADH,EACGA,eACRC,QAAQC,IAAIF,GACRG,EAAU,IAAIC,YAAY,SAHzB,SAICJ,EAAeK,WAAWF,EAAQG,OAAOV,IAJ1C,OAKLC,EAAS,CACPU,KAAM,qBACNC,QAASR,IAPN,2CAAP,yD,eCdaS,EAjBO,SAAC,GAA2B,EAAzBC,MAAyB,EAAlBC,YAAmB,IAC3Cd,EAAWe,cAEjB,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,aAAc,GACpBC,QAAS,kBAAMpB,EDbrB,uCAAO,WAAOA,GAAP,+BAAAE,EAAA,6DACCmB,EAAc,uCACdC,EAAqB,uCAE3BlB,QAAQC,IAAI,sCAJP,SAMgBkB,UAAUC,UAAUC,cAAc,CACrDC,QAAS,CAAC,CAAEC,KAAM,CAAC,YACnBC,iBAAkB,CAACP,KARhB,cAMCQ,EAND,OAWLzB,QAAQC,IAAI,gCAXP,SAYgBwB,EAAOC,KAAKC,UAZ5B,cAYCC,EAZD,OAcL5B,QAAQC,IAAI,sBAdP,UAeiB2B,EAAOC,kBAAkBZ,GAf1C,eAeCa,EAfD,OAiBL9B,QAAQC,IAAI,6BAjBP,UAkBwB6B,EAAQC,kBAAkBb,GAlBlD,eAkBCnB,EAlBD,OAoBLC,QAAQC,IAAI,yBApBP,UAqBoBF,EArBpB,eAqBDiC,EArBC,OAuBLhC,QAAQC,IAAI,yBAvBP,UAwBe+B,EAAaC,YAxB5B,QAwBCC,EAxBD,OA0BDC,EAAU,IAAIC,YAAY,SAC9BpC,QAAQC,IAAI,sCAAwCkC,EAAQE,OAAOH,IAEnEtC,EAAS,CACPU,KAAM,oBACNC,QAASyB,IA/BN,4CAAP,wDCcMM,QAAQ,WAHV,UAKE,cAAC,IAAD,IALF,gBCsBSC,EA/BS,WACtB,OACE,eAAC3B,EAAA,EAAD,CAAKE,GAAI,GAAT,UACE,sFACA,+EAEE,mBACE0B,KAAK,oEACLC,OAAO,SACPC,IAAI,sBAHN,qBAFF,gCAWA,yIAIA,gHAIA,iHAEY,mBAAGF,KAAK,GAAR,kBAFZ,c,mCCwBSG,EAvCI,SAAC,GAA8C,IAA5CjC,EAA2C,EAA3CA,YAAakC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACnD,OACE,cAAClC,EAAA,EAAD,CAAKE,GAAI,CAAEiC,UAAW,EAAGC,EAAG,EAAGC,GAAI,GAAnC,SACE,cAACC,EAAA,EAAD,CACEC,QAAQ,EACRb,QAAQ,WACRxB,GAAI,CACFsC,QAAS,eACTrC,aAAc,EACdsC,SAAU,IACVC,UAAW,IACXC,WAAYX,EACZA,MAAOC,GATX,SAYE,eAACW,EAAA,EAAD,CAAgBxC,QAASN,EAAzB,UACE,cAAC+C,EAAA,EAAD,CAAY3C,GAAI,CAAE4C,SAAU,IAAMd,MAAM,iBAAiBe,cAAY,EAArE,SACE,yBAEF,cAACF,EAAA,EAAD,CAAYnB,QAAQ,KAAKsB,UAAU,MAAnC,SACGd,IAEH,cAACW,EAAA,EAAD,CAAY3C,GAAI,CAAE+C,GAAI,KAAOjB,MAAM,iBAAnC,uBAGA,eAACa,EAAA,EAAD,CAAYnB,QAAQ,QAApB,qCAEE,uBACA,uBACA,uBACA,uBACC,kC,SCKEK,EApCI,SAAC,GAA8C,IAA5CjC,EAA2C,EAA3CA,YAAakC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACnD,OACE,cAAClC,EAAA,EAAD,CAAKoC,EAAG,EAAGC,GAAI,EAAf,SACE,cAACa,EAAA,EAAD,CACEC,UAAW,EACXzB,QAAQ,WACRxB,GAAI,CACFsC,QAAS,eACTrC,aAAc,EACdsC,SAAU,IACVC,UAAW,IACXC,WAAYX,EACZA,MAAOC,GATX,SAYE,eAACW,EAAA,EAAD,CAAgBxC,QAASN,EAAzB,UACE,cAAC+C,EAAA,EAAD,CAAY3C,GAAI,CAAE4C,SAAU,IAAMd,MAAM,iBAAiBe,cAAY,EAArE,6BAGA,cAACF,EAAA,EAAD,CAAYnB,QAAQ,KAAKsB,UAAU,MAAnC,SACGd,IAEH,cAACW,EAAA,EAAD,CAAY3C,GAAI,CAAE+C,GAAI,KAAOjB,MAAM,iBAAnC,uBAGA,eAACa,EAAA,EAAD,CAAYnB,QAAQ,QAApB,qCAEE,uBACC,kCC+EE0B,EA7GF,WACX,IAAMpE,EAAWe,cACjB,OACE,gCACE,sCACA,uBACA,8BACE,sBACEsD,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,SAAU,OACVhB,QAAS,OACTiB,gBAAiB,QANrB,UASE,cAAC,EAAD,CACE3D,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,MACNC,UAAU,QACVC,MAAM,QAER,cAAC,EAAD,CACEpC,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,QACNC,UAAU,QACVC,MAAM,UAER,cAAC,EAAD,CACEpC,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,QACNC,UAAU,QACVC,MAAM,UAER,cAAC,EAAD,CACEpC,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,OACNC,UAAU,QACVC,MAAM,SAER,cAAC,EAAD,CACEpC,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,SACNC,UAAU,QACVC,MAAM,WAER,cAAC,EAAD,CACEpC,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,QACNC,UAAU,QACVC,MAAM,eAKZ,2CACA,uBACA,8BACE,sBACEmB,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,SAAU,OACVhB,QAAS,OACTiB,gBAAiB,QANrB,UASE,cAACC,EAAD,CACE5D,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,aACNC,UAAU,QACVC,MAAM,iBAER,cAACwB,EAAD,CACE5D,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,QACNC,UAAU,QACVC,MAAM,UAER,cAACwB,EAAD,CACE5D,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,QACNC,UAAU,QACVC,MAAM,UAER,cAACwB,EAAD,CACE5D,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,OACNC,UAAU,QACVC,MAAM,SAER,cAACwB,EAAD,CACE5D,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,SACNC,UAAU,QACVC,MAAM,WAER,cAACwB,EAAD,CACE5D,YAAa,kBAAMd,EAASF,EAAkB,OAC9CkD,MAAM,QACNC,UAAU,QACVC,MAAM,mBCvEHyB,MAhCf,WAAgB,IAAD,EACqCC,oBAAS,GAD9C,mBACNC,EADM,KACaC,EADb,KAEPC,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMF,eASjD,OARiBhE,cAEjBmE,qBAAU,WACJ3D,UAAUC,WACZsD,GAAqB,KAEtB,IAGD,iCACID,IAAsBE,GACtB,8BACE,cAAC,EAAD,OAGFA,GAAeF,GACf,8BACE,cAACM,EAAD,MAGHJ,GACC,8BACE,cAAC,EAAD,UCpBUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCPRQ,EAAgB,CACpBnB,aAAa,EACboB,cAAe,GACfhG,eAAgB,IAuBHiG,EApBC,WAAoC,IAAnCnB,EAAkC,uDAA1BiB,EAAeG,EAAW,uCACjD,OAAQA,EAAO3F,MACb,IAAK,oBACH,MAAO,CACLqE,aAAa,EACboB,cAAeE,EAAO1F,QACtBR,eAAgBkG,EAAO1F,SAE3B,IAAK,qBAEH,OADAP,QAAQC,IAAI4E,GACL,CACLF,aAAa,EACboB,cAAelB,EAAMkB,cACrBhG,eAAgBkG,EAAO1F,SAE3B,QACE,OAAOsE,IClBAqB,EAAQC,YAAYH,EAASI,YAAgBC,MCK1DC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SJoHpB,kBAAmBvF,WACrBA,UAAUwF,cAAcC,MACrBpB,MAAK,SAACqB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNhH,QAAQgH,MAAMA,EAAMC,YI/G5B5B,M","file":"static/js/main.89faef72.chunk.js","sourcesContent":["export const connectToBluetooth = () => {\n  return async (dispatch) => {\n    const serviceUuid = \"e472cea9-3ae8-4d96-951e-7086fe17d416\";\n    const characteristicUuid = \"7abd909a-a9e5-4409-96a9-7aa4fa33426f\";\n\n    console.log(\"Requesting any Bluetooth Device...\");\n\n    const device = await navigator.bluetooth.requestDevice({\n      filters: [{ name: [\"VAware\"] }],\n      optionalServices: [serviceUuid],\n    });\n\n    console.log(\"Connecting to GATT Server...\");\n    const server = await device.gatt.connect();\n\n    console.log(\"Getting Service...\");\n    const service = await server.getPrimaryService(serviceUuid);\n\n    console.log(\"Getting Characteristic...\");\n    const characteristic = await service.getCharacteristic(characteristicUuid);\n\n    console.log(\"Getting Descriptor...\");\n    let myDescriptor = await characteristic;\n\n    console.log(\"Reading Descriptor...\");\n    const value = await myDescriptor.readValue();\n\n    let decoder = new TextDecoder(\"utf-8\");\n    console.log(\"> Characteristic User Description: \" + decoder.decode(value));\n\n    dispatch({\n      type: \"CONNECT_BLUETOOTH\",\n      payload: myDescriptor,\n    });\n  };\n};\n\nexport const activatePneumatic = (val) => {\n  return async (dispatch, getState) => {\n    const { characteristic } = getState();\n    console.log(characteristic);\n    let encoder = new TextEncoder(\"utf-8\");\n    await characteristic.writeValue(encoder.encode(val));\n    dispatch({\n      type: \"ACTIVATE_PNEUMATIC\",\n      payload: characteristic,\n    });\n  };\n};\n","import { Button, Fab } from \"@mui/material\";\nimport React from \"react\";\nimport BluetoothConnectedIcon from \"@mui/icons-material/BluetoothConnected\";\nimport { useDispatch } from \"react-redux\";\nimport { connectToBluetooth } from \"../actions\";\nimport { Box } from \"@mui/system\";\n\nconst ConnectButton = ({ label, handleEvent }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Box>\n      <Fab\n        sx={{ borderRadius: 5 }}\n        onClick={() => dispatch(connectToBluetooth())}\n        variant=\"extended\"\n      >\n        <BluetoothConnectedIcon />\n        Connect\n      </Fab>\n    </Box>\n  );\n};\n\nexport default ConnectButton;\n","import React from \"react\";\nimport { Box } from \"@mui/system\";\n\nconst BleNotSupported = () => {\n  return (\n    <Box sx={{}}>\n      <h1>ðŸ˜” This Browser does not support Bluetooth</h1>\n      <p>\n        If you are using an iPhone please use this&nbsp;\n        <a\n          href=\"https://apps.apple.com/us/app/bluefy-web-ble-browser/id1492822055\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          browser\n        </a>\n        &nbsp;to control the device.\n      </p>\n      <p>\n        If you are using an Android Device, Please use the default Chrome\n        browser, and enable bluetooth settings\n      </p>\n      <p>\n        Chrome supports Bluetooth connections on Mac devices and most Windows\n        computers\n      </p>\n      <p>\n        If you would like to learn more about this project you can check it out\n        over&nbsp;<a href=\"\">here</a>&nbsp;\n      </p>\n    </Box>\n  );\n};\n\nexport default BleNotSupported;\n","import {\n  Card,\n  CardActionArea,\n  CardContent,\n  Paper,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport {} from \"@mui/material\";\nimport React from \"react\";\n\nconst TestButton = ({ handleEvent, color, textColor, title }) => {\n  return (\n    <Box sx={{ boxShadow: 6, m: 1, pt: 2 }}>\n      <Paper\n        raised={true}\n        variant=\"outlined\"\n        sx={{\n          display: \"inline-block\",\n          borderRadius: 7,\n          minWidth: 275,\n          minHeight: 350,\n          background: color,\n          color: textColor,\n        }}\n      >\n        <CardActionArea onClick={handleEvent}>\n          <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n            <br />\n          </Typography>\n          <Typography variant=\"h1\" component=\"div\">\n            {title}\n          </Typography>\n          <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n            adjective\n          </Typography>\n          <Typography variant=\"body2\">\n            well meaning and kindly.\n            <br />\n            <br />\n            <br />\n            <br />\n            {'\"a benevolent smile\"'}\n          </Typography>\n        </CardActionArea>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default TestButton;\n","import {\n  Card,\n  CardActionArea,\n  CardContent,\n  Paper,\n  Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport {} from \"@mui/material\";\nimport React from \"react\";\n\nconst TestButton = ({ handleEvent, color, textColor, title }) => {\n  return (\n    <Box m={2} pt={2}>\n      <Card\n        elevation={3}\n        variant=\"outlined\"\n        sx={{\n          display: \"inline-block\",\n          borderRadius: 7,\n          minWidth: 350,\n          minHeight: 350,\n          background: color,\n          color: textColor,\n        }}\n      >\n        <CardActionArea onClick={handleEvent}>\n          <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n            Word of the Day\n          </Typography>\n          <Typography variant=\"h1\" component=\"div\">\n            {title}\n          </Typography>\n          <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n            adjective\n          </Typography>\n          <Typography variant=\"body2\">\n            well meaning and kindly.\n            <br />\n            {'\"a benevolent smile\"'}\n          </Typography>\n        </CardActionArea>\n      </Card>\n    </Box>\n  );\n};\n\nexport default TestButton;\n","import { Grid } from \"@mui/material\";\nimport { Box, width } from \"@mui/system\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport HorizontalScroll from \"react-scroll-horizontal\";\nimport { activatePneumatic } from \"../actions\";\nimport TestButton from \"../components/TestButton\";\nimport ScenarioButton from \"../components/ScenarioButton\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <h1>Test</h1>\n      <br />\n      <div>\n        <div\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n            overflow: \"auto\",\n            display: \"flex\",\n            msOverflowStyle: \"none\",\n          }}\n        >\n          <TestButton\n            handleEvent={() => dispatch(activatePneumatic(\"1\"))}\n            color=\"red\"\n            textColor=\"white\"\n            title=\"Red\"\n          />\n          <TestButton\n            handleEvent={() => dispatch(activatePneumatic(\"2\"))}\n            color=\"white\"\n            textColor=\"black\"\n            title=\"White\"\n          />\n          <TestButton\n            handleEvent={() => dispatch(activatePneumatic(\"3\"))}\n            color=\"green\"\n            textColor=\"white\"\n            title=\"Green\"\n          />\n          <TestButton\n            handleEvent={() => dispatch(activatePneumatic(\"4\"))}\n            color=\"blue\"\n            textColor=\"white\"\n            title=\"Blue\"\n          />\n          <TestButton\n            handleEvent={() => dispatch(activatePneumatic(\"5\"))}\n            color=\"yellow\"\n            textColor=\"black\"\n            title=\"Yellow\"\n          />\n          <TestButton\n            handleEvent={() => dispatch(activatePneumatic(\"6\"))}\n            color=\"black\"\n            textColor=\"white\"\n            title=\"Black\"\n          />\n        </div>\n      </div>\n\n      <h1>Scenarios</h1>\n      <br />\n      <div>\n        <div\n          style={{\n            width: \"100%\",\n            height: \"auto\",\n            overflow: \"auto\",\n            display: \"flex\",\n            msOverflowStyle: \"none\",\n          }}\n        >\n          <ScenarioButton\n            handleEvent={() => dispatch(activatePneumatic(\"1\"))}\n            color=\"lightgreen\"\n            textColor=\"white\"\n            title=\"ðŸ™€\"\n          />\n          <ScenarioButton\n            handleEvent={() => dispatch(activatePneumatic(\"2\"))}\n            color=\"white\"\n            textColor=\"black\"\n            title=\"White\"\n          />\n          <ScenarioButton\n            handleEvent={() => dispatch(activatePneumatic(\"3\"))}\n            color=\"green\"\n            textColor=\"white\"\n            title=\"Green\"\n          />\n          <ScenarioButton\n            handleEvent={() => dispatch(activatePneumatic(\"4\"))}\n            color=\"blue\"\n            textColor=\"white\"\n            title=\"Blue\"\n          />\n          <ScenarioButton\n            handleEvent={() => dispatch(activatePneumatic(\"5\"))}\n            color=\"yellow\"\n            textColor=\"black\"\n            title=\"Yellow\"\n          />\n          <ScenarioButton\n            handleEvent={() => dispatch(activatePneumatic(\"6\"))}\n            color=\"black\"\n            textColor=\"white\"\n            title=\"Black\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ConnectPage from \"./pages/ConnectPage\";\nimport BleNotSupported from \"./pages/BleNotSupported\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  const [supportsBluetooth, setSupportsBluetooth] = useState(false);\n  const isConnected = useSelector((state) => state.isConnected);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (navigator.bluetooth) {\n      setSupportsBluetooth(true);\n    }\n  }, []);\n\n  return (\n    <div>\n      {!supportsBluetooth && !isConnected && (\n        <div>\n          <BleNotSupported />\n        </div>\n      )}\n      {!isConnected && supportsBluetooth && (\n        <div>\n          <ConnectPage />\n        </div>\n      )}\n      {isConnected && (\n        <div>\n          <Home />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const INITIAL_STATE = {\n  isConnected: false,\n  connectDevice: {},\n  characteristic: {},\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"CONNECT_BLUETOOTH\":\n      return {\n        isConnected: true,\n        connectDevice: action.payload,\n        characteristic: action.payload,\n      };\n    case \"ACTIVATE_PNEUMATIC\":\n      console.log(state);\n      return {\n        isConnected: true,\n        connectDevice: state.connectDevice,\n        characteristic: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"../reducer\";\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}